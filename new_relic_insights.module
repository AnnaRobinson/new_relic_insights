<?php

/**
 * @file
 * Hooks and functions for the New Relic Insights module.
 */


/**
 * Defines the name of the New Relic Insights queue.
 */
define('NEW_RELIC_INSIGHTS_QUEUE', 'new_relic_insights');

/**
 * Implements hook_menu().
 */
function new_relic_insights_menu() {
  // Queue runner callback (so you don't have to run cron to run the queue).
  $items['new-relic-insights-runner/%'] = array(
    'title' => 'Insights Queue Runner',
    'description' => 'Runs through queued Insights items.',
    'type' => MENU_CALLBACK,
    'page callback' => 'new_relic_insights_run_queue_page',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  // Configuration page for the module.
  $items['admin/config/development/new-relic-insights'] = array(
    'title' => 'New Relic Insights',
    'description' => 'Configure options for the New Relic Insights module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('new_relic_insights_settings'),
    'access arguments' => array('administer new relic insights'),
    'file' => 'new_relic_insights.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function new_relic_insights_permission() {
  return array(
    'administer new relic insights' => array(
      'title' => t('Administer New Relic Insights'),
      'description' => t('Perform administration tasks for New Relic Insights.'),
    ),
  );
}

/**
 * Implements hook_clients_connection_type_info().
 */
function new_relic_insights_clients_connection_type_info() {
  return array(
    'new_relic_insights_query' => array(
      'label'  => t('New Relic Insights Query'),
      'description' => t('Queries New Relic Insights'),
    ),
  );
}

/**
 * Implements hook_clients_default_connections().
 */
function new_relic_insights_clients_default_connections() {
  $items = array();

  if (new_relic_insights_is_queryable()) {
    $account = variable_get('new_relic_insights_account_id', '');
    $query_key = variable_get('new_relic_insights_query_key', '');

    $items['new_relic_insights_query_default'] = entity_import('clients_connection', '{
      "name" : "new_relic_insights_query_default",
      "endpoint" : "https:\\/\\/insights-api.newrelic.com\\/v1\\/accounts\\/' . $account .'",
      "configuration" : {
        "debug" : 0,
        "credentials_storage" : "connection_configuration",
        "account" : "' . $account . '",
        "key" : "' . $query_key . '"
      },
      "label" : "Default New Relic Insights Query Client",
      "type" : "new_relic_insights_query"
    }');
  }

  return $items;
}

/**
 * Implements hook_clients_default_resources().
 */
function new_relic_insights_clients_default_resources() {
  $items = array();

  if (new_relic_insights_is_queryable()) {
    $items['new_relic_insight_default_entity'] = entity_import('clients_resource', '{
      "remoteEntityQuery" : null,
      "component" : "insight",
      "connection" : "new_relic_insights_query_default",
      "name" : "new_relic_insight_default_entity",
      "label" : "Default New Relic Insights Entity",
      "type" : "remote_entity",
      "configuration" : null,
      "rdf_mapping" : []
    }');
  }

  return $items;
}

/**
 * Implements hook_watchdog().
 */
function new_relic_insights_watchdog($data) {
  // Only send watchdog data to Insights if enabled.
  if (!variable_get('new_relic_insights_collect_watchdog', FALSE)) {
    return;
  }

  // Tell Insights what type of event this is.
  $data['eventType'] = 'watchdog';

  // Truncate the user object down to just the user's e-mail address.
  $data['user'] = isset($data['user']->mail) ? $data['user']->mail : '';

  // Provide the fully rendered message as its own key.
  $data['fullMessage'] = $data['message'];
  if (isset($data['variables']) && is_array($data['variables'])) {
    $data['fullMessage'] = format_string($data['fullMessage'], $data['variables']);
  }

  // The associative array must be flat, so we merge in all variables.
  if (isset($data['variables']) && is_array($data['variables'])) {
    foreach ($data['variables'] as $key => $value) {
      unset($data['variables'][$key]);
      $new_key = str_replace(array('!', '%', '@'), array('_var_', '_var_', '_var_'), $key);
      $data['variables'][$new_key] = $value;
    }
    $data = array_merge($data, $data['variables']);
  }
  unset($data['variables']);

  // Instantiate our queue, add this item to it.
  $queue = DrupalQueue::get(NEW_RELIC_INSIGHTS_QUEUE);
  $queue->createItem($data);
}

/**
 * Implements hook_better_statistics_log().
 */
function new_relic_insights_better_statistics_log($data) {
  // Only send accesslog data to Insights if enabled.
  if (!variable_get('new_relic_insights_collect_accesslog', FALSE)) {
    return;
  }

  // Remove the aid key, it's unpopulated and of no use to us.
  unset($data['aid']);

  // Add custom parameters to this transaction for each Better Stat field.
  if (extension_loaded('newrelic')) {
    foreach ($data as $key => $value) {
      newrelic_add_custom_parameter($key, $value);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function new_relic_insights_cron_queue_info() {
  return array(
    NEW_RELIC_INSIGHTS_QUEUE => array(
      'worker callback' => 'new_relic_insights_post_event',
      'time' => 120,
    ),
  );
}

/**
 * Sends a single event, represented as an associative array, to Insights.
 *
 * @param array $data
 *   An associative array of data to be JSON encoded and POSTed to Insights.
 */
function new_relic_insights_post_event($data) {
  // Only proceed if an account ID and insert key are present.
  $account_id = variable_get('new_relic_insights_account_id', '');
  $insert_key = variable_get('new_relic_insights_insert_key', '');
  if ($account_id && $insert_key) {
    // Build the Insights Insert API URL.
    $url = variable_get('new_relic_insights_baseurl', 'https://insights.newrelic.com/beta_api');
    $url .= '/accounts/' . $account_id;
    $url .= '/events';

    // JSON encode the data.
    $data = drupal_json_encode($data);

    // Initialize, configure, and execute the curl handle.
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
      'Content-Type: application/json',
      'Content-Length: ' . strlen($data),
      'User-Agent: ' . variable_get('new_relic_insights_ua', 'Drupal (+http://drupal.org/)'),
      'X-Insert-Key: ' . $insert_key,
    ));
    curl_exec($ch);
    curl_close($ch);
  }
}

/**
 * Runs through and processes all queued items for New Relic Insights.
 *
 * @return int
 *   Returns the number of queued items that were run through.
 */
function new_relic_insights_run_queue() {
  $counter = 0;

  $queue = DrupalQueue::get(NEW_RELIC_INSIGHTS_QUEUE);
  while ($item = $queue->claimItem()) {
    new_relic_insights_post_event($item->data);
    $queue->deleteItem($item);
    $counter++;
  }

  return $counter;
}

/**
 * Page callback for running through queued items through the GUI. Useful if you
 * want to only run through queued items without running all of cron or if you
 * don't use drush queue.
 *
 * @param string $cron_key
 *   A unique token to use to prevent just anyone from running the queue.
 *
 * @return string
 *   Output suitable for display as a page.
 */
function new_relic_insights_run_queue_page($cron_key) {
  // Do not allow this transaction to be cached.
  drupal_page_is_cacheable(FALSE);

  // Run through all queued events.
  if ($cron_key == variable_get('cron_key', 'drupal')) {
    // Some New Relic-specific code.
    if (extension_loaded('newrelic')) {
      // Mark this transaction as a background job.
      newrelic_background_job(TRUE);
    }

    // Ensure that no time limit is imposed.
    set_time_limit(0);

    $counter = new_relic_insights_run_queue();
  }

  return t('Ran %counter queued items successfully.', array(
    '%counter' => $counter,
  ));
}

/**
 * Returns whether or not New Relic Insights are queryable.
 */
function new_relic_insights_is_queryable() {
  $account = variable_get('new_relic_insights_account_id', '');
  $query_key = variable_get('new_relic_insights_query_key', '');

  return $account && $query_key && module_exists('remote_entity');
}
