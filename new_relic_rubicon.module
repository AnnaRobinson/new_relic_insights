<?php

/**
 * @file
 * Hooks and functions for the New Relic: Rubicon module.
 */


/**
 * Defines the name of the New Relic: Rubicon queue.
 */
define('NEW_RELIC_RUBICON_QUEUE', 'new_relic_rubicon');

/**
 * Implements hook_menu().
 */
function new_relic_rubicon_menu() {
  // Queue runner callback (so you don't have to run cron to run the queue).
  $items['new-relic-rubicon-runner/%'] = array(
    'title' => 'Rubicon Queue Runner',
    'description' => 'Runs through queued Rubicon items.',
    'type' => MENU_CALLBACK,
    'page callback' => 'new_relic_rubicon_run_queue',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  // Configuration page for the module.
  $items['admin/config/development/rubicon'] = array(
    'title' => 'Rubicon',
    'description' => 'Configure options for the New Relic: Rubicon module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('new_relic_rubicon_settings'),
    'access arguments' => array('administer new relic rubicon'),
    'file' => 'new_relic_rubicon.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function new_relic_rubicon_permission() {
  return array(
    'administer new relic rubicon' => array(
      'title' => t('Administer New Relic: Rubicon'),
      'description' => t('Perform administration tasks for New Relic: Rubicon.'),
    ),
  );
}

/**
 * Implements hook_watchdog().
 */
function new_relic_rubicon_watchdog($data) {
  // Only send watchdog data to Rubicon if enabled.
  if (!variable_get('new_relic_rubicon_collect_watchdog', FALSE)) {
    return;
  }

  // Tell Rubicon what type of event this is.
  $data['eventType'] = 'watchdog';

  // Truncate the user object down to just the user's e-mail address.
  $data['user'] = isset($data['user']->mail) ? $data['user']->mail : '';

  // Provide the fully rendered message as its own key.
  $data['fullMessage'] = strip_tags(format_string($data['message'], $data['variables']));

  // The associative array must be flat, so we merge in all variables.
  foreach ($data['variables'] as $key => $value) {
    unset($data['variables'][$key]);
    $new_key = str_replace(array('!', '%', '@'), array('_var_', '_var_', '_var_'), $key);
    $data['variables'][$new_key] = $value;
  }
  $data = array_merge($data, $data['variables']);
  unset($data['variables']);

  // Instantiate our queue, add this item to it.
  $queue = DrupalQueue::get(NEW_RELIC_RUBICON_QUEUE);
  $queue->createItem($data);
}

/**
 * Implements hook_better_statistics_log().
 */
function new_relic_rubicon_better_statistics_log($data) {
  // Only send accesslog data to Rubicon if enabled.
  if (!variable_get('new_relic_rubicon_collect_accesslog', FALSE)) {
    return;
  }

  // Tell Rubicon what type of event this is.
  $data['eventType'] = 'accesslog';

  // Remove the aid key, it's unpopulated and of no use to us.
  unset($data['aid']);

  $queue = DrupalQueue::get(NEW_RELIC_RUBICON_QUEUE);
  $queue->createItem($data);
}

/**
 * Implements hook_cron_queue_info().
 */
function new_relic_rubicon_cron_queue_info() {
  return array(
    NEW_RELIC_RUBICON_QUEUE => array(
      'worker callback' => 'new_relic_rubicon_post_event',
      'time' => 120,
    ),
  );
}

/**
 * Sends a single event, represented as an associative array, to Rubicon.
 *
 * @param array $data
 *   An associative array of data to be JSON encoded and POSTed to Rubicon.
 */
function new_relic_rubicon_post_event($data) {
  // Only proceed if an account ID and insert key are present.
  $account_id = variable_get('new_relic_rubicon_account_id', '');
  $insert_key = variable_get('new_relic_rubicon_insert_key', '');
  if ($account_id && $insert_key) {
    // Build the Rubicon Insert API URL.
    $url = variable_get('new_relic_rubicon_baseurl', 'https://rubicon.newrelic.com/beta_api');
    $url .= '/accounts/' . $account_id;
    $url .= '/events';

    // JSON encode the data.
    $data = drupal_json_encode($data);

    // Initialize, configure, and execute the curl handle.
    $ch = curl_init($url);
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'POST');
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
    curl_setopt($ch, CURLOPT_HTTPHEADER, array(
      'Content-Type: application/json',
      'Content-Length: ' . strlen($data),
      'User-Agent: ' . variable_get('new_relic_rubicon_ua', 'Drupal (+http://drupal.org/)'),
      'X-Insert-Key: ' . $insert_key,
    ));
    curl_exec($ch);
    curl_close($ch);
  }
}

/**
 * Runs through and processes all queued items for New Relic: Rubicon.
 *
 * @param string $cron_key
 *   A unique token to use to prevent just anyone from running the queue.
 *
 * @return string
 *   Returns a translated string indicating the number of queued items run.
 */
function new_relic_rubicon_run_queue($cron_key) {
  $counter = 0;

  if ($cron_key == variable_get('cron_key', 'drupal')) {
    $queue = DrupalQueue::get(NEW_RELIC_RUBICON_QUEUE);
    while ($item = $queue->claimItem()) {
      new_relic_rubicon_post_event($item->data);
      $queue->deleteItem($item);
      $counter++;
    }
  }

  return t('Ran %counter queued items successfully.', array(
    '%counter' => $counter,
  ));
}
